

model.jar: 

1. Introduction
novel model of joint dependency parsing and named entity recognition. Currently only three types (person, location, organization) are supported. 


2. Parameters Setting
One Parameter is fixed as follows:
   --- L2 Regularization Parameter: 0.7

3. Run the program
Running Command: java -jar bdp.jar -trainNum 200 -testNum 100 -thread 5 -maxSentLen 100 -spanWidth 10 -iter 100
      --trainNum: number of training instances, set to -1 will use the whole dataset
      --testNum: same as numTrainInsts
      --iter: 500 to 600 is recommended.
      --thread: number of thread to run the program, depends on your infracstructure. 
      --nested: true or false. options for nested dataset. 
      
The data should be stored in data/semeval10t1/en.train.txt and data/semeval10t1/en.test.txt

Note: 
	(1) Running the program in background, you should type this command:
        nohup java -jar bdp.jar -trainNum 200 -testNum 100 -thread 5 -maxSentLen 100 -spanWidth 10 -iter 100 > logfile 2>&1 &
	(2) The features in the current program only use the features that appeared in the training datasets.
	(3) Run in Amazon, just copy the folder "dp" and go to "dp" directory and then run the java command. (Remember to set a larger java heap size: export _JAVA_OPTIONS=-Xmx20480m )

3. Entity Type
	person, organization, gpe
	support B-person, I-person type like this

4. Data File Description
	*.eval.txt: file for evaluation
		modelName.ner.eval.txt: word pos-tag trueEntity predEntity
		
	*.res.txt: result in the file
		(1) modelName.ner.res.txt: index word pos-tag trueEntity predEntity trueHeadIndex   (Later can be used in pipeline)
		(2) modelName.dp.res.txt: index word pos trueEntity trueHeadIndex predHeadIndex    (Later can be used in pipeline)
		(3) pp.ner2dp.dp.res.txtï¼š index word pos entityFromNERResult(1) trueHeadIndex predHeadIndex
		(4) pp.dp2ner.ner.res.txt: index word pos trueEntity predEntity headIndexFromDPResult
	
	*.joint.res.txt: result of joint model
		modelName.joint.res.txt: index word pos-tag trueEntity predEntity trueHeadIndex predHeadIndex
	
	Note: headIndex is starting from 0, 0 means head is root. Word index start from 1 according to that logic.
		